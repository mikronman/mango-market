pipeline {
    agent any

    environment {
        PATH = "${env.PATH}:${env.WORKSPACE}/node_modules/.bin"
        AWS_DEFAULT_REGION = 'us-east-2'
        DOCKER_HUB_CREDENTIALS_ID = 'f1627232-d6d8-4f01-a7c0-ac81bda59a2b'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    def image = docker.build('mikronman/my-docker-app:latest')
                    withDockerRegistry([url: "https://index.docker.io/v1/", credentialsId: env.DOCKER_HUB_CREDENTIALS_ID]) {
                        image.push('latest')
                    }
                }
            }
        }
        stage('Create EKS Cluster') {
            steps {
                script {
                    def clusterExists = sh(script: "eksctl get cluster --name my-cluster --region us-east-2", returnStatus: true)
                    if (clusterExists != 0) {
                        sh 'eksctl create cluster -f cluster.yaml'
                    } else {
                        echo "Cluster already exists. Skipping cluster creation."
                    }
                }
            }
        }
        stage('Apply Kubernetes Configuration') {
            steps {
                sh 'kubectl apply -f deployment.yaml'
                sh 'kubectl apply -f service.yaml'
            }
        }
    }
}
